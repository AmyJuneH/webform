<?php
// $Id$

  /** This module provides a simple way to create forms and questionnaires 
   * for your website.
   * The development of this module was sponsered by &Aring;F Industri AB,
   * Open Source City and Karlstad University Library.
   *
   * @author Pontus Ullgren <ullgren@user.sourceforge.net>
   * @package module_webform
   * @copyright Pontus Ullgren 2003
   * 
   **/

/** Hook Help - displayes help and general infomation about the module
 * @param section specifies the section to display help for.
 * @return a formated string containing the help output.
 **/
function webform_help($section = "admin/help#webform") {
  $output = "";
  
  switch ($section) {
  case 'admin/settings/webform':
    $output = t("Webforms are forms and questionnaires. To add one select <strong>create content -&gt; webform</strong>. Below you can set diffrent security and debug options.");
    break;
  case 'admin/help#webform':
    $output = t("<p>This module lets you create forms or questionnaires and define there content. Submissions from these forms are stored in the database and optionaly also send by e-mail to a predefined address.</p>
<p>Here is how to create one:
<ul>
 <li>Go to Create Content and add a webform</li>
 <li>Add a description that is displayed as a teaser and above the acctual form.</li>
 <li>Add a confirmation message that are displayed after a successfull submission.</li>
 <li>Select which roles who should have submission access to this form (roles that have the &quot;use all webforms&quot; permision can allways use a webform).</li>
 <li>Add one or more components to your form.</li>
 <li>Optionaly add a email address to which submissions will be send. If no email address is specified no email will be send when submissions are made through the form.</li>
</ul>
Help on adding and how to configure the components will be shown after adding your first component.
</p>
<p>On user submissions the form content is stored in the database table <i>webform_submited_data</i> as key-value pairs. Apart from the form fields the following &quot;special&quot; fields are added:
<ul>
  <li> __userid : UID of the submiting user.</li>
  <li> __timestamp : UNIX timestamp for when the submission occured.</li>
  <li> __remotehost : IP or name of the remote host from which the submission came.</li>
  <li> __useragent : What user agent (browser) the user used upon submitting the data.</li>
</ul>
");
    break;
  case 'admin/modules#description':
    $output = t("Enables the creation of forms and questionnaires.");
    break;
  case 'node/add#webform':
    $output = t("A webform can be a questionnaires, contact or request forms. It can be used to let visitors make contact, register for a event or to enable a complex survey.");
    break;
  case 'webform/helptext#variables':
    $output = t('Available variables are: %username, %useremail, %site, %date.');
    if ( module_exist('profile') ) {
      $output .= t('If you are using the profiles module, you can also access all profile data using the syntax %profile[form_name]. If you for example have a profile value named profile_city, add the varible %profile[profile_city].');
    }
    break;
  }
  return $output;
}


function webform_perm() {
  return array("maintain webforms", "create webforms", "use all webforms");
}


/**
 * Define the human-readable name of a node type.
 */
function webform_node_name($node) {
  return t('webform');
}


function webform_access($op, $node) {
  global $user;
  
  if ($op == "view") {
    if ( user_access("use all webforms") ) {
      return $node->status;
    }
    else if ( is_array($node->roles) ) {
      foreach ($node->roles as $rid) {
        if( isset($user->roles[$rid]) ) {
          return $node->status;
        }
      }
    }
    return false;
  }
  
  if ($op == "create") {
    return user_access("create webforms");
  }
  
  if ($op == "update") {
    return user_access("maintain webforms");
  }
  
  if ($op == "delete") {
    return user_access("maintain webforms");
  }
  return false;
}

function webform_insert($node) {
  global $user;
  // insert
  db_query("INSERT INTO {webform} (nid, confirm, email) VALUES (%d, '%s', '%s')", 
           $node->nid, $node->confirm, $node->email);
  
  if( is_array($node->webformcomponents_name) && !empty($node->webformcomponents_name)) {
    foreach($node->webformcomponents_name as $key => $name) {
      db_query("INSERT INTO {webform_component} (nid, cid, name, type, value, extra, mandatory, weight) ".
               " VALUES (%d, %d, '%s', '%s', '%s', '%s', %d, %d)",
               $node->nid, $key, $name, 
               $node->webformcomponents_type[$key],
               $node->webformcomponents_value[$key], 
               $node->webformcomponents_extra[$key], 
               ($node->webformcomponents_mandatory[$key]?1:0), 
               $node->webformcomponents_weight[$key]);
    }
  }
  
  _webform_role_node_delete($node->nid);
  
  if (is_array($node->roles)) {
    // Filter all empty roles
    foreach ($node->roles as $rid) {
      if($rid != 0)
        $roles[] = $rid;
    }
    // Add the users group if it isn't allready checked.
    if(!is_array($roles) || !in_array($user->rid, $roles)) {
      $roles[] = $user->rid;
    }
    
    if (!empty($roles)) {
      foreach ($roles as $rid) {
        db_query("INSERT INTO {webform_role_node} (nid, rid) VALUES (%d, %d)", $node->nid, $rid);
      }
    }
  }
}

function webform_update($node) {
  // Update 
  db_query("UPDATE {webform} SET confirm = '%s', email = '%s' ".
           "WHERE nid = %d", $node->confirm, $node->email, $node->nid);
  
  db_query("DELETE FROM {webform_component} WHERE nid = %d", $node->nid);

  if( is_array($node->webformcomponents_name) && !empty($node->webformcomponents_name)) {
    foreach($node->webformcomponents_name as $key => $name) {   
      db_query("INSERT INTO {webform_component} (nid, cid, name, type, value, extra, mandatory, weight) ".
               " VALUES (%d, %d, '%s', '%s', '%s', '%s', %d, %d)",
               $node->nid, $key, $name, 
               $node->webformcomponents_type[$key],
               $node->webformcomponents_value[$key], 
               $node->webformcomponents_extra[$key], 
               ($node->webformcomponents_mandatory[$key]?1:0), 
               $node->webformcomponents_weight[$key]);
    }
  }
  
  _webform_role_node_delete($node->nid);
  
  if ($node->roles) {
    foreach ($node->roles as $rid) {
      if($rid != 0)
        db_query("INSERT INTO {webform_role_node} (nid, rid) VALUES (%d, %d)", $node->nid, $rid);
    }
  } 
}

function webform_delete(&$node) {
  // delete 
  db_query("DELETE FROM {webform} WHERE nid = %d", $node->nid);
  db_query("DELETE FROM {webform_component} WHERE nid = %d", $node->nid);
  _webform_role_node_delete($node->nid);
}

function webform_load($node) {
  // load 
  $page = db_fetch_object(db_query("SELECT confirm, email FROM {webform} WHERE nid = %d", $node->nid));
  
  $result = db_query('SELECT cid, name, type, value, extra, mandatory, weight '.
                     ' FROM {webform_component} '.
                     ' WHERE nid = %d '.
                     ' ORDER BY weight', $node->nid);
  while($c = db_fetch_array($result)) {
    $page->webformcomponents_name[$c['cid']] = $c['name'];
    $page->webformcomponents_type[$c['cid']] = $c['type'];
    $page->webformcomponents_value[$c['cid']] = $c['value'];
    $page->webformcomponents_extra[$c['cid']] = $c['extra'];
    $page->webformcomponents_mandatory[$c['cid']] = $c['mandatory'];
    $page->webformcomponents_weight[$c['cid']] = $c['weight'];
  }
  
  $result = db_query("SELECT rid FROM {webform_role_node} WHERE nid = %d", $node->nid);
  while($rid = db_fetch_array($result)) {
    $page->roles[]=$rid['rid'];
  }
  
  return $page;
}

function webform_settings(){
  $installed_version  = variable_get('webform_version', array('text'=> 'Unknown', 'build' => -1));
  $current_version = _webform_version();
  if ( $installed_version['build'] < $current_version['build'] ) {
    $output .= '<div>'.l(t('Update from version %a to version %b', 
                           array( '%a' => $installed_version['text'], '%b' => $current_version['text']) ), 
                         'webform/upgrade').'</div>';
  }
  $output .= form_select(t("Allow cross site posting"), "webform_allow_cross_site_posting",
                         variable_get("webform_allow_cross_site_posting", 0),
                         array(0 => t('Yes'), 1 => t('No')),
                         t("Allow postings to your webforms that do not originating from your sites domain."));
  $output .= form_select(t("Webforms Debug"), "webform_debug",
                         variable_get("webform_debug", 0),
                         array(0 => "OFF", 1 => "Log submissions", 2 => "Full debug"),
                         '<br />'.t("DEBUG for the webform module") . '<br />' .
                         t('Set this option to "Log submissions" to log all submissions in the watchdog. Set it to "Full debug" to print debug info on submission. You probably want to leave this option on "OFF".'));
  
  return $output;
} // end function webform_settings

function webform_validate(&$node) {
  
  if( isset($_POST['edit_component']) ) {
    // If we are adding a new componenet or removing a old one 
    // we have to do what the framework would do for us so we don't loose 
    // information.
    if( isset($_POST['edit']) ) {
      $node = array2object($_POST['edit']);
    }
    _webform_editfield();
    exit(0);
  }

  if( isset($_POST['webform_edit_done']) ) {
    $old_edit = unserialize($_POST['old_edit']);
    $edit = array_merge($_POST['edit'], $old_edit);
    // If we are adding a new componenet or removing a old one 
    // we have to do what the framework would do for us so we don't loose 
    // information.
    $node = array2object($edit);

    // We have just edited component add it to the node
    $node->webformcomponents_name[$node->webform_edited_key] = $node->webform_edited_name;
    $node->webformcomponents_type[$node->webform_edited_key] = $node->webform_edited_type;
    $node->webformcomponents_value[$node->webform_edited_key] = $node->webform_edited_default;
    $node->webformcomponents_extra[$node->webform_edited_key] = serialize($node->webform_edited_extra);
    drupal_set_message(t('The form component has been changed. Remember to press Submit on the bottom of this form to save your changes.'));
  }
  
  if(isset($_POST['delete_component']) && isset($_POST['edit']['webform_checked_component']) ) {
    unset($node->webformcomponents_name[$_POST['edit']['webform_checked_component']]);
    drupal_set_message(t('The form component has been deleted. Remember to press Submit on the bottom of this form to save your changes.'));
  }

  // Validate the body field.
  if (isset($node->body)) {
    if (!$node->body) {
      form_set_error('body', t('You have to specify a form description.'));
      return false;
    }
  }

  // Validate confirm field
  if (isset($node->confirm)) {
    if (!$node->confirm) {
      form_set_error('confirm', t('You have to specify a confimation message.'));
      return $false;
    }
  }
  
  return true;
}

/**
 * Implementation of hook_menu().
 */
function webform_menu() {
  global $user;

  $items = array();

  // create content -> webfor
  $items[] = array('path' => 'node/add/webform', 'title' => t('webform'),
                   'access' => user_access('maintain webforms'));

  $items[] = array('path' => 'webform/done', 'title' => t('webform'),
                   'callback' => '_webform_thanks',
                   'type' => MENU_CALLBACK,
                   'access' => true);
  
  // Upgrade page for the webform
  $items[] = array('path' => 'webform/upgrade', 'title' => t('Webform upgrade page'),
                   'callback' => '_webform_update',
                   'type' => MENU_CALLBACK, 
                   'access' => ($user->uid == 1)); // Access only for the "admin" user.
  
  return $items;
}

/** 
 * Implementation of hook_link().
 * Always add a "view form" link
 **/
function webform_link($type, $node = 0, $main = 0) {
  if ( $node->type == 'webform' ) {
    if ( $main == 1) {
      $links[] = l(t('view form'), "node/$node->nid", array('title' => t('View this form.'), 'class' => 'read-more'));
    }
    if (!$main && arg(0) == 'webform' && arg(1) == 'done') {
      $links[] = l(t('Go back to the form'), 'node/'.$node->nid);
    }
  }
  return $links;
}

function webform_form(&$node, &$error) {
  $component_types = array('textfield' => t('textfield'),
                           'textarea' => t('textarea'),
                           'select' => t('select'),
                           'lable' => t('lable'),
                           'hidden' => t('hidden'),
                           'email' => t('e-mail address'));
  
  // User access stuff
  $roles = user_roles(0); // Get all roles including anonymous users
  $checkboxes = '';
  foreach ($roles as $rid => $role) {
    // Uggly way to create a array 
    $checkboxes .= form_checkbox($role, "roles][", $rid, (is_array($node->roles) && in_array($rid, $node->roles)?1:0));
  }
  if(!empty($checkboxes))
    $output .= form_item(t('Use access'),$checkboxes, t('Roles that should be able to submit data using this form.'));
  
  if (function_exists("taxonomy_node_form")) {
    $output .= implode("", taxonomy_node_form("webform", $node));
  } 
  
  $output .= form_textarea(t("Description"), "body", $node->body, 20, 10, 
                           $error["body"]. " ". t('Text to be shown as teaser and before the form.'), NULL, TRUE);
  
  $output .= form_textarea(t("Confirmation message"), "confirm", $node->confirm, 20, 10, 
                           $error["confirm"]." ".t("Message to be shown upon successfull submission."), NULL, TRUE);
  
  // List all form components.
  if( is_array($node->webformcomponents_name) && !empty($node->webformcomponents_name)) {
    foreach($node->webformcomponents_name as $key => $name) {
      $other = form_hidden("webformcomponents_type][".$key.']', $node->webformcomponents_type[$key]).
        form_hidden("webformcomponents_extra][".$key, $node->webformcomponents_extra[$key]);

      $rows[] = array(
                      form_radio('', 'webform_checked_component', $key),
                      form_textfield('', "webformcomponents_name][".$key, $name, 20, 50),
                      $node->webformcomponents_type[$key],
                      form_textfield('', "webformcomponents_value][".$key, 
                                          $node->webformcomponents_value[$key], 20, 255),
                      form_checkbox('', "webformcomponents_mandatory][".$key, 
                                    '1', ($node->webformcomponents_mandatory[$key]?1:0)),                      
                      form_weight('', "webformcomponents_weight][".$key,
                                  ($node->webformcomponents_weight[$key]?$node->webformcomponents_weight[$key]:0)).
                      $other);
    }

    $help_text = theme_item_list(array(
                                       t('To edit a component, check its "selected" box and press "Edit selected".'),
                                       t('To delete a component, check its "selected" box and press "Delete selected".'),
                                       t('Use "value" to enter a default value.'),
                                       t('Check "mandatory" box if the field should be mandatory.'),
                                       t('Remember to set weight on the components or they will be added to the form in a random order.')
                                       )
                                 );
    $output .= form_item(t('Form components'), $help_text);
    $headers = array(
                     '<span>&nbsp;&nbsp;'.t('select').'</span>',
                     '<span>'.t('name').'</span>',
                     t('type'),
                     '<span>'.t('value').'</span>',
                     '<span>'.t('mandatory').'</span>',
                     '<span>'.t('weight').'</span>'
                     );
    $output .= theme('table', $headers, $rows);

    $output .= form_button(t('Edit selected'), 'edit_component');
    $output .= form_button(t('Delete selected'), 'delete_component');

  }
  // Mini-form to add a new component.
  $output .= form_select(t('Add a new component'), 'webform_newfield_type', $node->webform_newfield_type, 
                         $component_types, t('Select a component type to add.'));
  $output .= form_button(t('Add'), 'edit_component');

  $output .= form_textfield(t("E-mail address"), "email", $node->email, 60,
			    127, t('Form submissions will be e-mailed to this address.').($error["email"] ? $error["email"] : ''));
  
  return $output;
}

function webform_view(&$node, $teaser = 0, $page = 0) {
  $doSubmit = true;

  $submited = $_POST['edit']['submited'];
  if( is_array($node->webformcomponents_name) && !empty($node->webformcomponents_name)) {
    foreach($node->webformcomponents_name as $key => $name) {
      $extra = unserialize ($node->webformcomponents_extra[$key]);
      if ( $_POST['webform_send'] ) {
        $error = _webform_submission_ok($name, 
                                        $node->webformcomponents_type[$key],
                                        $submited[$name], 
                                        $node->webformcomponents_mandatory[$key]);
        if ( $error !== 0 ) {
          $doSubmit = false;
        }
      }
      
      $output .= _webform_create_widget(
                   $name, $node->webformcomponents_type[$key], 
                   $node->webformcomponents_mandatory[$key],
                   (isset($submited[$name])?
                    $submited[$name]:
                    _webform_filtervalues($node->webformcomponents_value[$key])), 
                   $extra, $error);
    }
    if ( (!isset($_POST['op']) || ($_POST['op'] != t('Preview'))) ) {
      $output .= form_button(t('Submit'), 'webform_send', 'submit');
    }
    $output = form($output);
  }
  
  if ( $doSubmit && $_POST['webform_send']) {
    if(_webform_process_submit($node, $errors)) {
      // Submission was successfull redirect to webform/done/<nid>
      drupal_goto('webform/done/'.$node->nid);
      return;
    }
  }
  
  $node->body .= $output;
}

function _webform_editfield() {
  // we have to do what the framework would do for us so we don't loose 
  // information.
  if( isset($_POST['edit']) ) {
    $node = array2object($_POST['edit']);
  }
  else {
    // We are calling this page in the wrong way ... 
    // Do some clean up ??
    print theme('page', theme('error', t('Page called out of order')));
    return;
  }
  
  // This is the information about the current field.
  $currfield = array();

  if ( $_POST['edit_component'] != t('Add') ) {
    // We are editing a existing field.
    // Fetch all filed data into the $currfield object.
    $currfield['key'] = $node->webform_checked_component;
    $currfield['type'] = $node->webformcomponents_type[$currfield['key']];
    $currfield['name'] = $node->webformcomponents_name[$currfield['key']];
    $currfield['default'] = $node->webformcomponents_value[$currfield['key']];
    $currfield['extra'] = unserialize($node->webformcomponents_extra[$currfield['key']]);
  }
  else {
    // We are editing a new node
    $currfield['key'] = time();
    $currfield['type'] = $node->webform_newfield_type;
    $currfield['name'] = $node->webform_newfield_type . $currfield['key'];
  }
  
  // Print the correct field type specification
  // We always need: name and description.
  $form .= form_hidden('webform_edited_type', $currfield['type']);
  $form .= form_hidden('webform_edited_key', $currfield['key']);
  $form .= form_textfield(t("Name"), "webform_edited_name", $currfield['name'], 60,
			    127, t('Name of the field. This is used as a descriptive lable and as the key when saving data in the database.').($error['webform_edited_name'] ? $error['webform_edited_name'] : ''));
  $form .= form_textfield(t("Description"), "webform_edited_extra][description", $currfield['extra']['description'], 
                          60, 127, 
                          t('A short description of the field used as help for the user when he/she uses the form.').'<br />'.
                          webform_help('webform/helptext#variables').
                          ($error['webform_edited_extra'] ? $error['webform_edited_extra'] : ''));

  // Extra for textfield
  switch($currfield['type']) {
  case 'email':
    $form .= form_item(t('Default value'), NULL, t('The default value of a email field is always the users email address if he/she is logged in.'));
    $form .= form_textfield(t("Width"), "webform_edited_extra][width", $currfield['extra']['width'], 
                            5, 10, 
                            t('Width of the textfield.').
                            ($error['webform_edited_extra'] ? $error['webform_edited_extra'] : ''));
    break;
  case 'textfield':
    $form .= form_textfield(t("Default value"), "webform_edited_default", $currfield['default'], 
                            60, 127, 
                            t('The default value of the field.').'<br />'.
                            webform_help('webform/helptext#variables').
                            ($error['webform_edited_default'] ? $error['webform_edited_default'] : ''));
    
    $form .= form_textfield(t("Width"), "webform_edited_extra][width", $currfield['extra']['width'], 
                            5, 10, 
                            t('Width of the textfield.').
                            ($error['webform_edited_extra'] ? $error['webform_edited_extra'] : ''));
    break;
  case 'hidden':
    $form .= form_textfield(t("Default value"), "webform_edited_default", $currfield['default'], 
                            60, 127, 
                            t('The value of the field.').'<br />'.
                            webform_help('webform/helptext#variables').
                            ($error['webform_edited_default'] ? $error['webform_edited_default'] : ''));
    break;
  case 'textarea':
    $form .= form_textarea(t("Default value"), "webform_edited_default", $currfield['default'], 
                            60, 5, 
                            t('The default value of the area.').'<br />'.
                            webform_help('webform/helptext#variables').
                            ($error['webform_edited_default'] ? $error['webform_edited_default'] : ''));
    
    $form .= form_textfield(t("Width"), "webform_edited_extra][cols", $currfield['extra']['cols'], 
                            5, 10, 
                            t('Width of the textarea.').
                            ($error['webform_edited_extra'] ? $error['webform_edited_extra'] : ''));
    $form .= form_textfield(t("Height"), "webform_edited_extra][rows", $currfield['extra']['rows'], 
                            5, 10, 
                            t('Height of the textarea.').
                            ($error['webform_edited_extra'] ? $error['webform_edited_extra'] : ''));
    break;
  case 'select':
    $form .= form_textarea(t("Options"), "webform_edited_extra][items", $currfield['extra']['items'], 
                            60, 5, 
                            t('Enter one option per line.').'<br />'.
                            webform_help('webform/helptext#variables').
                            ($error['webform_edited_default'] ? $error['webform_edited_default'] : ''));
    $form .= form_textfield(t("Default value"), "webform_edited_default", $currfield['default'], 
                            60, 127, 
                            t('The preselected value.').'<br />'.
                            webform_help('webform/helptext#variables').
                            ($error['webform_edited_default'] ? $error['webform_edited_default'] : ''));
    $form .= form_checkbox(t('Multiple'), "webform_edited_extra][multiple", 'Y',
                           ($currfield['extra']['multiple']=='Y'?TRUE:FALSE), 
                           t('Check this option if the user should be allowed to choose multiple values.'));
    break;
    
  } // End switch

  if( isset($_POST['edit']) ) {
    $edit = $_POST['edit'];
    foreach($edit as $key => $value) {
      if( is_array($edit[$key]) ) {
        foreach($edit[$key] as $key2 => $value2) {
          if( !empty($value2) ) 
            $form .= form_hidden("$key][".$key2, $value2);
        }
      }
      else if( !empty($value) ) {
        $form .= form_hidden($key, $value);
      }
    }
  }
  
  $form .= form_button(t('Done'),  'webform_edit_done');
  
  print theme('page', form($form));
}

function _webform_process_submit(&$node, &$errors) {
  global $user, $base_url;
  
  // Check referer to deny posting from of sites.
  if ( variable_get('webform_allow_cross_site_posting', 0) == 1) {
    $referer = parse_url( urldecode($_SERVER['HTTP_REFERER']));
    $base = parse_url( urldecode($base_url.'/'));
    
    if ( $referer['scheme'] != $base['scheme']
         || $referer['host'] != $base['host']
	 ) {
      // The submission didn't originate from our own domain, return false
      watchdog('error', t('Trying to post to webform from external domain.'),
               '<a href="'.$_SERVER['HTTP_REFERER'].'">'.t('Visit referer').'</a>');
      drupal_set_message(t('You are not allowed to post to this form from an external domain.'), 'error');
      return false;    
    }
  }
  
  // Check to see if the user has right to use the webform
  if ( !user_access('use all webforms') ){
    if( !(is_array($node->roles) && in_array($user->rid, $node->roles)) ) {
      $message = t("You are not allowed to submit data using this form.");
      drupal_set_message($message, 'error');
      return false;
    }
  }
  // Handle posting to the form and output status.
  $confirm = $node->confirm;
  
  $reply = $_POST['edit']['submited'];
  _webform_save_submission($node, $reply);
  $message = _webform_create_mailmessage($reply);
  
  if (isset($node->email)) {
    $node->email = strip_tags($node->email);
    if (!empty($node->email)) {
      $headers = "From: "._webform_encodeHeader( variable_get('site_mail', "webmail@{$_SERVER['SERVER_NAME']}"))."\r\n".
	"Date: ".date("r")."\r\n".
        "MIME-Version: 1.0\r\n".
	"Content-Type: text/plain; charset=UTF-8\r\n".
	"Content-Disposition: inline\r\n".
	"Content-Transfer-Encoding: quoted-printable\r\n".
	"X-Mailer: Drupal Webform (PHP/" . phpversion().")";
      $subject = _webform_encodeHeader( t('Form submission from').' '.$node->title );
      mail($node->email, $subject, $message, _webform_encodeHeader($headers));
    }
  }

  if (variable_get('webform_debug', 0) >= 2) {
    drupal_set_message("<pre>$message</pre>");
  }
  if (variable_get('webform_debug', 0) >= 1) {
    watchdog('special', t('Submission posted to ')."'$node->title'.<br />\n<pre>$message</pre>",
             l(t('view node'),'node/view/'.$node->nid));
  }

  return true;
}

function _webform_thanks() {
  if ( arg(2) ) {
    $node = node_load(array('nid' => arg(2)));
    if ( node_access('view', $node) ) {
      $node->body = $node->confirm;
      print theme('page', theme('node', $node), false, false);
    }
    else {
      drupal_access_denied();
    }
  }
  else {
    drupal_not_found();
  }
}

function _webform_create_widget($name, $type, $mandatory, $value, $extra, $err = '') {
  global $user;
  $componentname = "submited][$name";
  
  switch($type) {
  case 'textarea':
    return form_textarea($name, $componentname, $value, $extra['cols'], $extra['rows'], 
                         _webform_filtervalues($extra['description']), NULL, $mandatory);
    break;
  case 'select':
    $items = explode("\n", _webform_filtervalues($extra['items']));
    foreach($items as $k => $v) {
      $v = trim($v);
      if ( !empty($v) ) 
        $options[$v] = $v;
    }
    if ( !is_array($value) ) {
      $value = array($value);
    }
    if ( $extra['multiple'] == 'Y' ) {
      return form_checkboxes($name, $componentname, $value, $options, 
                             _webform_filtervalues($extra['description']), NULL, $mandatory);
    }
    else {
      return form_radios($name, $componentname, $value, $options, 
                         _webform_filtervalues($extra['description']), $mandatory, NULL);
    }
    break;
  case 'lable':
    return form_item($name, NULL, _webform_filtervalues($extra['description']));
  case 'hidden':
    return form_hidden($componentname, $value);
  case 'email':
    if($user->uid && $user->mail && empty($value)) {
      $value = $user->mail;
    }
  default:  // textfield
    $maxsize = 255;
    if ($extra['width'] && is_numeric($extra['width'])) {
      $maxsize = $extra['width'];
    }
    return form_textfield($name, $componentname, $value, ($extra['width']?$extra['width']:50),
                          $maxsize, _webform_filtervalues($extra['description']), 
                          NULL, ($mandatory==1?TRUE:FALSE));
    break;
  }
}

function _webform_submission_ok($name, $type, $value, $mandatory) {
  // Check if it is mandatory and if so that it exists and have a value
  if($mandatory && empty($value)) {
    form_set_error('submited]['.$name, t('You have not completed the form. %s is a mandatory field.', array('%s' => $name)));
    return 1;
  }
  return 0;
}

/** Filters all special chars
 **/
function _webform_filtervalues($string) {
  global $user;

  $find = array('%username', '%useremail', '%site', '%date');
  $replace = array($user->name, $user->mail, variable_get('site_name', 'drupal'),  
                   format_date(time(), 'large'));

  if (module_exist('profile')) {
    profile_load_profile($user);
    foreach($user as $k => $v) {
      $find[] = "%profile[$k]";
      $replace[] = $v;
    }
  }
  $string = str_replace( $find, $replace, $string);

  if (module_exist('profile')) {
    // Clean up any unused %profile stuff
    $string = preg_replace('/\%profile\[\w+\]/', '', $string);
  }
  return $string;
}

function _webform_create_mailmessage($reply) {
  global $user;
  
  $message .=  t('Submited on').' '.format_date(time(), 'small')."\r\n";
  
  if($user->uid) {
    $message .= t('Submited by user').": $user->name"."\r\n";
  }
  else {
    $message .= t('Submited by anonymous user').'['.$_SERVER['REMOTE_ADDR'].']'."\r\n";
  }
  $message .= t('Submited values are:')."\r\n";
  foreach($reply as $key => $value) {
    if (is_array($value)) {
      $message .=  "$key :";
      foreach($value as $k => $v) {
        $message .= "\r\n\t"."$k = $v";
      }
      $message .= "\r\n";
    }
    else {
      $message .=  "$key : $value"."\r\n";
    }
  }
  
  if (variable_get('webform_debug', 0) == 2) {
    $message .= "\r\n";
    $message .= "DEBUG INFO\r\n";
    $message .= "==========\r\n";
    $message .= "\$_SERVER is\r\n";
    $message .= print_r($_SERVER, true);
    $message .= "\r\n";
    $message .= "\$_POST is\r\n";
    $message .= print_r($_POST, true);
  }

  return _webform_qp_enc($message, 79);
  // return $message;
}

function _webform_save_submission($node, $reply) {
  global $user;
  
  $reply['__userid'] = $user->uid;
  $reply['__timestamp'] = time();
  $reply['__remotehost'] = $_SERVER['REMOTE_ADDR'];
  $reply['__useragent'] = $_SERVER['HTTP_USER_AGENT'];

  $sid = db_next_id('{webform_submissions}_id');

  foreach($reply as $key => $value) {
    // TODO: Save array i a better way.
    if (is_array($value)) {
      $value = serialize($value);
    }
    
    $values[] = sprintf("(%d, %d, '%s', '%s')", $node->nid, $sid, $key, $value);
  }
  db_query("INSERT INTO {webform_submited_data} (nid, sid, name, data) ".
           "VALUES ".implode(', ', $values));
}

function _webform_role_node_delete($nid) {
  db_query("DELETE FROM {webform_role_node} WHERE nid = $nid");
}

/**
 * Encode a string according to RFC 1522 for use in headers if it
 * contains 8-bit characters or anything that looks like it should
 * be encoded.
 * Nicked from the SquirrelMail project.
 * @param $string
 */
function _webform_encodeHeader ($string) {
  $charset = 'utf-8';
  
  if (strtolower($charset) == 'iso-8859-1') {
    $string = str_replace("\240",' ',$string);
  }
  
  // Encode only if the string contains 8-bit characters or =?
  $j = strlen($string);
  $max_l = 75 - strlen($charset) - 7;
  $aRet = array();
  $ret = '';
  $iEncStart = $enc_init = false;
  $cur_l = $iOffset = 0;
  for($i = 0; $i < $j; ++$i) {
    switch($string{$i})
      {
      case '=':
      case '<':
      case '>':
      case ',':
      case '?':
      case '_':
	if ($iEncStart === false) {
	  $iEncStart = $i;
	}
	$cur_l+=3;
	if ($cur_l > ($max_l-2)) {
	  /* if there is an stringpart that doesn't need encoding, add it */
	  $aRet[] = substr($string,$iOffset,$iEncStart-$iOffset);
	  $aRet[] = "=?$charset?Q?$ret?=";
	  $iOffset = $i;
	  $cur_l = 0;
	  $ret = '';
	  $iEncStart = false;
	} else {
	  $ret .= sprintf("=%02X",ord($string{$i}));
	}
	break;
      case '(':
      case ')':
	if ($iEncStart !== false) {
	  $aRet[] = substr($string,$iOffset,$iEncStart-$iOffset);
	  $aRet[] = "=?$charset?Q?$ret?=";
	  $iOffset = $i;
	  $cur_l = 0;
	  $ret = '';
	  $iEncStart = false;
	}
	break;
      case ' ':
	if ($iEncStart !== false) {
	  $cur_l++;
	  if ($cur_l > $max_l) {
	    $aRet[] = substr($string,$iOffset,$iEncStart-$iOffset);
	    $aRet[] = "=?$charset?Q?$ret?=";
	    $iOffset = $i;
	    $cur_l = 0;
	    $ret = '';
	    $iEncStart = false;
	  } else {
	    $ret .= '_';
	  }
	}
	break;
      default:
	$k = ord($string{$i});
	if ($k > 126) {
	  if ($iEncStart === false) {
	    // do not start encoding in the middle of a string, also take the rest of the word.
	    $sLeadString = substr($string,0,$i);
	    $aLeadString = explode(' ',$sLeadString);
	    $sToBeEncoded = array_pop($aLeadString);
	    $iEncStart = $i - strlen($sToBeEncoded);
	    $ret .= $sToBeEncoded;
	    $cur_l += strlen($sToBeEncoded);
	  }
	  $cur_l += 3;
	  /* first we add the encoded string that reached it's max size */
	  if ($cur_l > ($max_l-2)) {
	    $aRet[] = substr($string,$iOffset,$iEncStart-$iOffset);
	    $aRet[] = "=?$charset?Q?$ret?= "; /* the next part is also encoded => separate by space */
	    $cur_l = 3;
	    $ret = '';
	    $iOffset = $i;
	    $iEncStart = $i;
	  }
	  $enc_init = true;
	  $ret .= sprintf("=%02X", $k);
	} else {
	  if ($iEncStart !== false) {
	    $cur_l++;
	    if ($cur_l > $max_l) {
	      $aRet[] = substr($string,$iOffset,$iEncStart-$iOffset);
	      $aRet[] = "=?$charset?Q?$ret?=";
	      $iEncStart = false;
	      $iOffset = $i;
	      $cur_l = 0;
	      $ret = '';
	    } else {
	      $ret .= $string{$i};
	    }
	  }
	}
	break;
      }
  }
  
  if ($enc_init) {
    if ($iEncStart !== false) {
      $aRet[] = substr($string,$iOffset,$iEncStart-$iOffset);
      $aRet[] = "=?$charset?Q?$ret?=";
    } else {
      $aRet[] = substr($string,$iOffset);
    }
    $string = implode('',$aRet);
  }
  return $string;
}

/** 
 * Create quoted_printable text.
 * Nicked from the PHP manual.
 **/
function _webform_qp_enc($input, $line_max = 79) {

  $hex = array('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F');
  $lines = preg_split("/(?:\r\n|\r|\n)/", $input);
  $eol = "\r\n";
  $escape = "=";
  $output = "";
  
  while( list(, $line) = each($lines) ) {
    //$line = rtrim($line); // remove trailing white space -> no =20\r\n necessary
    $linlen = strlen($line);
    $newline = "";
    for($i = 0; $i < $linlen; $i++) {
      $c = substr($line, $i, 1);
      $dec = ord($c);
      if ( ($dec == 32) && ($i == ($linlen - 1)) ) { // convert space at eol only
	$c = "=20";
      } elseif ( ($dec == 61) || ($dec < 32 ) || ($dec > 126) ) { // always encode "\t", which is *not* required
	$h2 = floor($dec/16); $h1 = floor($dec%16);
	$c = $escape.$hex["$h2"].$hex["$h1"];
      }
      if ( (strlen($newline) + strlen($c)) >= $line_max ) { // CRLF is not counted
	$output .= $newline.$escape.$eol; // soft line break; " =\r\n" is okay
	$newline = "";
      }
      $newline .= $c;
    } // end of for
    $output .= $newline.$eol;
  }
  return trim($output);  
}

/**
 * Returns the version of this release of the webform module.
 *
 * @return array An array with keys 'text' and 'build' containing the
 *         text version and build ID of this release, respectively.
 */
function _webform_version() {
  /* Why text and an ID?  Well, the text is easier for the user to
   * read and understand while the build ID, being a number (a date
   * with a serial, specifically), is easier for the developer to use
   * to determine newer/older versions for upgrade and installation
   * purposes.
   */
  return array("text" => "4.5.0", "build" => 2004102500);
} // function _webform_version

/**
 * Makes updates to the database structure.
 **/
function _webform_update() {
  $installed_version  = variable_get('webform_version', array('text'=> 'Unknown', 'build' => -1));
  $current_version =  _webform_version();

  if ( $installed_version['build'] < $current_version['build']) {  
    include_once('database/updates.inc');
    include_once('includes/bootstrap.inc');
    include_once('includes/common.inc');

    // Check to see if we should do a update.
    print "<strong>Upgrading webform from ".$installed_version['build'] .
      " to ". $current_version['build']."</strong><br />\n";

    // Upgrading from original version    
    if ( $installed_version['build'] <= -1 ) {
      // Add the table webform_submited_data
      $ret[] = update_sql("CREATE TABLE {webform_submited_data} ".
                          "( nid int(10) unsigned not null, ".
                          "sid int(10) unsigned not null, ".
                          "name varchar(255) not null, ".
                          "data blob, ".
                          "PRIMARY KEY(nid, sid, name))");
      // Converting data from old submission table.
      $ret[] = _webform_convert_old_submissions();

      print "<strong>Build -1</strong><br />\n<pre>\n";
      foreach ( $ret as $return ) {
        print $return[1];
        print $return[2];
      }
      print "</pre>\n";
    }

    // Set the $current_version
    print "<strong>Done!</strong><br/>\n";
    print l(t('Go back'), 'admin/settings/webform')."<br/>\n";
    variable_set("webform_version", $current_version);
  } // end if ( $installed_version['build'] < $current_version['build'])
} // end function _webform_update 

/** 
 * Function to convert the old XML formated submissions into the newer format.
 **/
function _webform_convert_old_submissions() {
  // Select all from webform_submissions.
  $result = db_query("SELECT nid, sid, uid, UNIX_TIMESTAMP(created) as created, data ".
                   "FROM {webform_submissions}");
  
  while ($row = db_fetch_object($result) ) {
    // TODO: Parse each XML string ...
    // ... and insert the data into the new table.
  }
  return array('1', "Converting old submissions", "<div style=\"color: red;\">Not implemented!</div>\n");
} // end function _webform_convert_old_submissions

?>
